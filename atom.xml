<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>虎哥的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bohutang.me/"/>
  <updated>2020-06-07T07:50:48.923Z</updated>
  <id>https://bohutang.me/</id>
  
  <author>
    <name>BohuTANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ClickHouse和他的朋友们： MySQL Protocol和读取调用栈</title>
    <link href="https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/"/>
    <id>https://bohutang.me/2020/06/07/clickhouse-and-friends-mysql-protocol-read-stack/</id>
    <published>2020-06-07T07:51:29.956Z</published>
    <updated>2020-06-07T07:50:48.923Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个OLAP的DBMS来说，有2个端非常重要：</p><ul><li><p>用户如何方便的链进来，这是入口端</p><ul><li>ClickHouse除了自己的client外，还提供了MySQL/PG/GRPC/HTTP等接入方式</li></ul></li><li><p>数据如何方便的挂上去，这是数据源端</p><ul><li>ClickHouse除了自己的引擎外，还可以挂载MySQL/Kafka等外部数据源</li></ul></li></ul><p>这样内外互通，多条朋友多条路，以实现“数据”级的编排能力。</p><p>今天谈的是入口端的MySQL协议，也是本系列ClickHouse的第一个好朋友，用户可通过MySQL客户端或相关Driver直接链接到ClickHouse，进行数据读写等操作。</p><p>本文通过MySQL的Query请求，借用调用栈来了解下ClickHouse的数据读取全过程。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title=" 如何实现？"></a><b> 如何实现？</b></h2><p>入口文件在:<br><a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Server/MySQLHandler.cpp" target="_blank" rel="noopener">MySQLHandler.cpp</a></p><h3 id="握手协议"><a href="#握手协议" class="headerlink" title="握手协议"></a><b>握手协议</b></h3><ol><li>MySQLClient发送Greeting数据报文到MySQLHandler</li><li>MySQLHandler回复一个Greeting-Response报文</li><li>MySQLClient发送认证报文</li><li>MySQLHandler对认证报文进行鉴权，并返回鉴权结果</li></ol><p>MySQL Protocol实现在: <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Core/MySQLProtocol.h" target="_blank" rel="noopener">Core/MySQLProtocol.h</a></p><h3 id="Query请求"><a href="#Query请求" class="headerlink" title="Query请求"></a><b>Query请求</b></h3><p>当认证通过后，就可以进行正常的数据交互了。</p><ol><li><p>当MySQLClient发送请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM system.numbers LIMIT 5;</span><br></pre></td></tr></table></figure></li><li><p>MySQLHandler的调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt;MySQLHandler::comQuery -&gt; executeQuery -&gt; pipeline-&gt;execute -&gt; MySQLOutputFormat::consume</span><br></pre></td></tr></table></figure></li><li><p>MySQLClient接收到结果</p></li></ol><p>在步骤2里，executeQuery(executeQuery.cpp)非常重要。<br>它是所有前端Server和ClickHouse内核的接入口，第一个参数是SQL文本(‘select 1’)，第二个参数是结果集要发送到哪里去(socket net)。</p><h2 id="调用栈分析"><a href="#调用栈分析" class="headerlink" title="调用栈分析"></a><b>调用栈分析</b></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><h3 id="1-获取数据源"><a href="#1-获取数据源" class="headerlink" title="1. 获取数据源"></a>1. 获取数据源</h3><p>StorageSystemNumbers数据源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DB::StorageSystemNumbers::read(std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, DB::SelectQueryInfo const&amp;, DB::Context const&amp;, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) StorageSystemNumbers.cpp:132</span><br><span class="line">void DB::InterpreterSelectQuery::executeFetchColumns&lt;DB::QueryPipeline&gt;(DB::QueryProcessingStage::Enum, DB::QueryPipeline&amp;, std::__1::shared_ptr&lt;DB::PrewhereInfo&gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, DB::QueryPipeline&amp;) InterpreterSelectQuery.cpp:1419</span><br><span class="line">void DB::InterpreterSelectQuery::executeImpl&lt;DB::QueryPipeline&gt;(DB::QueryPipeline&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; const&amp;, std::__1::optional&lt;DB::Pipe&gt;, DB::QueryPipeline&amp;) InterpreterSelectQuery.cpp:777</span><br><span class="line">DB::InterpreterSelectQuery::executeWithProcessors() InterpreterSelectQuery.cpp:493</span><br><span class="line">DB::InterpreterSelectWithUnionQuery::executeWithProcessors() InterpreterSelectWithUnionQuery.cpp:257</span><br><span class="line">DB::executeQueryImpl(const char *, const char *, DB::Context &amp;, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer *) executeQuery.cpp:362</span><br><span class="line">DB::executeQuery(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, bool, DB::Context&amp;, std::__1::function&lt;void (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)&gt;) executeQuery.cpp:696</span><br><span class="line">DB::MySQLHandler::comQuery(DB::ReadBuffer&amp;) MySQLHandler.cpp:311</span><br><span class="line">DB::MySQLHandler::run() MySQLHandler.cpp:141</span><br><span class="line">Poco::Net::TCPServerConnection::start() TCPServerConnection.cpp:43</span><br><span class="line">Poco::Net::TCPServerDispatcher::run() TCPServerDispatcher.cpp:114</span><br><span class="line">Poco::PooledThread::run() ThreadPool.cpp:199</span><br></pre></td></tr></table></figure><h3 id="2-Pipeline构造"><a href="#2-Pipeline构造" class="headerlink" title="2. Pipeline构造"></a>2. Pipeline构造</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">operator() InterpreterSelectQuery.cpp:2534</span><br><span class="line">DB::callProcessorGetter(const DB::Block &amp;, const ProcessorGetterWithStreamKind &amp;, StreamType) QueryPipeline.cpp:191</span><br><span class="line">void DB::QueryPipeline::addSimpleTransformImpl&lt;std::__1::function&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; (DB::Block const&amp;, DB::QueryPipeline::StreamType)&gt; &gt;(std::__1::function&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; (DB::Block const&amp;, DB::QueryPipeline::StreamType)&gt; const&amp;)::&#39;lambda&#39;(DB::OutputPort*&amp;, DB::QueryPipeline::StreamType, unsigned long)::operator()(DB::OutputPort*&amp;, DB::QueryPipeline::StreamType, unsigned long) const QueryPipeline.cpp:206</span><br><span class="line">void DB::QueryPipeline::addSimpleTransformImpl&lt;std::__1::function&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; (DB::Block const&amp;, DB::QueryPipeline::StreamType)&gt; &gt;(std::__1::function&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; (DB::Block const&amp;, DB::QueryPipeline::StreamType)&gt; const&amp;) QueryPipeline.cpp:244</span><br><span class="line">DB::QueryPipeline::addSimpleTransform(std::__1::function&lt;std::__1::shared_ptr&lt;DB::IProcessor&gt; (DB::Block const&amp;, DB::QueryPipeline::StreamType)&gt; const&amp;) QueryPipeline.cpp:259</span><br><span class="line">DB::InterpreterSelectQuery::executeLimit(DB::QueryPipeline&amp;) InterpreterSelectQuery.cpp:2529</span><br><span class="line">void DB::InterpreterSelectQuery::executeImpl&lt;DB::QueryPipeline&gt;(DB::QueryPipeline&amp;, std::__1::shared_ptr&lt;DB::IBlockInputStream&gt; const&amp;, std::__1::optional&lt;DB::Pipe&gt;, DB::QueryPipeline&amp;) InterpreterSelectQuery.cpp:1058</span><br><span class="line">DB::InterpreterSelectQuery::executeWithProcessors() InterpreterSelectQuery.cpp:493</span><br><span class="line">DB::InterpreterSelectWithUnionQuery::executeWithProcessors() InterpreterSelectWithUnionQuery.cpp:257</span><br><span class="line">DB::executeQueryImpl(const char *, const char *, DB::Context &amp;, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer *) executeQuery.cpp:362</span><br><span class="line">DB::executeQuery(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, bool, DB::Context&amp;, std::__1::function&lt;void (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)&gt;) executeQuery.cpp:696</span><br><span class="line">DB::MySQLHandler::comQuery(DB::ReadBuffer&amp;) MySQLHandler.cpp:311</span><br><span class="line">DB::MySQLHandler::run() MySQLHandler.cpp:141</span><br></pre></td></tr></table></figure><h3 id="3-Pipeline执行"><a href="#3-Pipeline执行" class="headerlink" title="3. Pipeline执行"></a>3. Pipeline执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DB::LimitTransform::preparePair(DB::LimitTransform::PortsData&amp;) LimitTransform.cpp:140</span><br><span class="line">DB::LimitTransform::prepare(std::__1::vector&lt;unsigned long, std::__1::allocator&lt;unsigned long&gt; &gt; const&amp;, std::__1::vector&lt;unsigned long, std::__1::allocator&lt;unsigned long&gt; &gt; const&amp;) LimitTransform.cpp:104</span><br><span class="line">DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:291</span><br><span class="line">DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, unsigned long) PipelineExecutor.cpp:264</span><br><span class="line">DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:373</span><br><span class="line">DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, unsigned long) PipelineExecutor.cpp:264</span><br><span class="line">DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:373</span><br><span class="line">DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::PipelineExecutor::Edge&amp;, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, unsigned long) PipelineExecutor.cpp:264</span><br><span class="line">DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue&lt;DB::PipelineExecutor::ExecutionState*, std::__1::deque&lt;DB::PipelineExecutor::ExecutionState*, std::__1::allocator&lt;DB::PipelineExecutor::ExecutionState*&gt; &gt; &gt;&amp;, std::__1::unique_lock&lt;std::__1::mutex&gt;) PipelineExecutor.cpp:373</span><br><span class="line">DB::PipelineExecutor::initializeExecution(unsigned long) PipelineExecutor.cpp:747</span><br><span class="line">DB::PipelineExecutor::executeImpl(unsigned long) PipelineExecutor.cpp:764</span><br><span class="line">DB::PipelineExecutor::execute(unsigned long) PipelineExecutor.cpp:479</span><br><span class="line">DB::executeQuery(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, bool, DB::Context&amp;, std::__1::function&lt;void (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)&gt;) executeQuery.cpp:800</span><br><span class="line">DB::MySQLHandler::comQuery(DB::ReadBuffer&amp;) MySQLHandler.cpp:311</span><br><span class="line">DB::MySQLHandler::run() MySQLHandler.cpp:141</span><br></pre></td></tr></table></figure><h3 id="4-Output执行发送"><a href="#4-Output执行发送" class="headerlink" title="4. Output执行发送"></a>4. Output执行发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB::MySQLOutputFormat::consume(DB::Chunk) MySQLOutputFormat.cpp:53</span><br><span class="line">DB::IOutputFormat::work() IOutputFormat.cpp:62</span><br><span class="line">DB::executeJob(DB::IProcessor *) PipelineExecutor.cpp:155</span><br><span class="line">operator() PipelineExecutor.cpp:172</span><br><span class="line">DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic&lt;bool&gt;*) PipelineExecutor.cpp:630</span><br><span class="line">DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) PipelineExecutor.cpp:546</span><br><span class="line">DB::PipelineExecutor::executeImpl(unsigned long) PipelineExecutor.cpp:812</span><br><span class="line">DB::PipelineExecutor::execute(unsigned long) PipelineExecutor.cpp:479</span><br><span class="line">DB::executeQuery(DB::ReadBuffer&amp;, DB::WriteBuffer&amp;, bool, DB::Context&amp;, std::__1::function&lt;void (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)&gt;) executeQuery.cpp:800</span><br><span class="line">DB::MySQLHandler::comQuery(DB::ReadBuffer&amp;) MySQLHandler.cpp:311</span><br><span class="line">DB::MySQLHandler::run() MySQLHandler.cpp:141</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><b>总结</b></h2><p>ClickHouse的模块化比较清晰，像乐高积木一样可以组合拼装，当我们执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM system.numbers LIMIT 5</span><br></pre></td></tr></table></figure><p>首先内核解析SQL语句生成AST，然后根据AST获取数据源Source，pipeline.Add(Source)。<br>其次根据AST的信息添加相应的Transformer，pipeline.Add(LimitTransformer)。<br>然后添加Output Sink作为数据发送对象，pipeline.Add(OutputSink)。<br>执行pipeline, 各个Transformer开始工作。</p><p>ClickHouse的Transformer调度系统叫做Processor，也是决定性能的重要模块，后面会单独进行分析。<br>ClickHouse是一辆手动挡的豪华跑车，免费拥有，海啸们！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个OLAP的DBMS来说，有2个端非常重要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用户如何方便的链进来，这是入口端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClickHouse除了自己的client外，还提供了MySQL/PG/GRPC/HTTP等接入方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/l
      
    
    </summary>
    
    
    
      <category term="clickhouse" scheme="https://bohutang.me/tags/clickhouse/"/>
    
      <category term="ClickHouse和他的朋友们" scheme="https://bohutang.me/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
      <category term="mysql" scheme="https://bohutang.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ClickHouse和他的朋友们： 编译、开发、测试</title>
    <link href="https://bohutang.me/2020/06/05/clickhouse-and-friends-development/"/>
    <id>https://bohutang.me/2020/06/05/clickhouse-and-friends-development/</id>
    <published>2020-06-05T07:06:36.022Z</published>
    <updated>2020-06-05T07:06:36.022Z</updated>
    
    <content type="html"><![CDATA[<p>一次偶然的机会，和ClickHouse团队做了一次线下沟通，Alexey提到ClickHouse的设计哲学:</p><ol><li>The product must solve actual problem</li><li>And do it better than others</li></ol><p>用工程思维解决商业问题的典范啊！</p><p>对用户来说，他们关心的不是什么天花乱坠、上天入地的高科技，只是需要一个能很好解决自己问题的方案，这在开源社区是非常难得的，靠实力“野蛮式”生长。</p><p>于是，我对这个散发着伏特加味道的利器充满了好奇，并参与到ClickHouse的社区中一探究竟，第一感觉是开放、友好、战斗力强(AK47 vs CK16, ClickHouse 2016年开源)。</p><p>本文先从编译和测试入手，再到如何为社区贡献Patch，希望对那些想参与CK社区的同学有所帮助。</p><h2 id="如何本地编译和测试ClickHouse？"><a href="#如何本地编译和测试ClickHouse？" class="headerlink" title=" 如何本地编译和测试ClickHouse？"></a><b> 如何本地编译和测试ClickHouse？</b></h2><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a><b>源码获取</b></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;ClickHouse&#x2F;ClickHouse</span><br></pre></td></tr></table></figure><h3 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a><b>编译准备</b></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository ppa:ubuntu-toolchain-r&#x2F;test</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-9 g++-9 git python ninja-build</span><br><span class="line">sudo snap install cmake</span><br></pre></td></tr></table></figure><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><b>开始编译</b></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ClickHouse</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">export CC&#x3D;gcc-9</span><br><span class="line">export CXX&#x3D;g++-9</span><br><span class="line">cmake ..</span><br><span class="line">ninja</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a><b>测试方法</b></h3><p>ClickHouse的测试在官方<a href="https://github.com/ClickHouse/ClickHouse/blob/master/docs/en/development/tests.md" target="_blank" rel="noopener">development/tests</a>文档里有详细的介绍，这里列举3个常用的测试模式：</p><h4 id="1-Functional-Tests"><a href="#1-Functional-Tests" class="headerlink" title="1. Functional Tests"></a>1. Functional Tests</h4><p>  功能测试，主要用于ClickHouse内部功能测试，方式：输入一个sql文件，输出一个result，类似MySQL里的mtr，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/queries" target="_blank" rel="noopener">测试集合</a></p><h4 id="2-Integration-Tests"><a href="#2-Integration-Tests" class="headerlink" title="2. Integration Tests"></a>2. Integration Tests</h4><p>  集成测试，主要用于涉及第三方服务的测试，比如MySQL/Postgres/MongoDB等，以容器化方式编排调度(pytest)运行，<a href="https://github.com/ClickHouse/ClickHouse/tree/master/tests/integration" target="_blank" rel="noopener">测试集合</a></p><p>  由于涉及模块较多，集成测试环境的搭建有一定的难度，建议使用官方的docker镜像。比如要跑test_mysql_protocol下的集成测试集：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd tests&#x2F;integration</span><br><span class="line">docker pull yandex&#x2F;clickhouse-integration-tests-runner</span><br><span class="line">.&#x2F;runner --binary &#x2F;your&#x2F;ClickHouse&#x2F;build&#x2F;dbms&#x2F;programs&#x2F;clickhouse  --bridge-binary &#x2F;your&#x2F;ClickHouse&#x2F;build&#x2F;dbms&#x2F;programs&#x2F;clickhouse-odbc-bridge --configs-dir &#x2F;your&#x2F;ClickHouse&#x2F;dbms&#x2F;programs&#x2F;server&#x2F; &#39;test_mysql_protocol&#x2F;test.py::test_java_client -ss -vv&#39;</span><br></pre></td></tr></table></figure><h4 id="3-Unit-Tests"><a href="#3-Unit-Tests" class="headerlink" title="3. Unit Tests"></a>3. Unit Tests</h4><p>  单元测试，主要用于代码模块的测试，测试集在各个模块的tests目录，比如: <a href="https://github.com/ClickHouse/ClickHouse/tree/master/src/Core/tests" target="_blank" rel="noopener">Core/tests</a></p><p>  如果大家想了解某个模块是如何工作的，强烈建议去翻翻该模块的tests目录，比如想了解processor的工作机制，跟踪调试 <a href="https://github.com/ClickHouse/ClickHouse/blob/master/src/Processors/tests/processors_test.cpp" target="_blank" rel="noopener">Processors/tests/</a> 即可。</p><h2 id="如何给ClickHouse社区提Patch？"><a href="#如何给ClickHouse社区提Patch？" class="headerlink" title=" 如何给ClickHouse社区提Patch？"></a><b> 如何给ClickHouse社区提Patch？</b></h2><h4 id="1-fork"><a href="#1-fork" class="headerlink" title="1. fork"></a>1. fork</h4><p>  首先在自己的github上fork一份ClickHouse代码，比如 <a href="https://github.com/BohuTANG/ClickHouse" target="_blank" rel="noopener">https://github.com/BohuTANG/ClickHouse</a></p><h4 id="2-clone到本地"><a href="#2-clone到本地" class="headerlink" title="2. clone到本地"></a>2. clone到本地</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;BohuTANG&#x2F;ClickHouse</span><br><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="3-创建新的分支"><a href="#3-创建新的分支" class="headerlink" title="3. 创建新的分支"></a>3. 创建新的分支</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -B mysql_replica(branch名字)</span><br></pre></td></tr></table></figure><h4 id="4-功能开发"><a href="#4-功能开发" class="headerlink" title="4. 功能开发"></a>4. 功能开发</h4><p>  开发者可以提交一个Draft Pull Request到官方，github会显示这个Pull Request处于Draft状态，官方是无法Merge的</p><h4 id="5-can-be-testd标签"><a href="#5-can-be-testd标签" class="headerlink" title="5. can be testd标签"></a>5. can be testd标签</h4><p>  等待Upstream打[can be tested]标签，一旦被标记CI狂魔们就强势开跑，跑一轮大概需要几十个小时。<br>  协助开发者发现一些代码Style、编译以及测试等错误，这样开发者就可以在自己的分支不停的迭代、修正。<br>   <img src="https://bohutang-1253727613.cos.ap-beijing.myqcloud.com/posts/github-ck-ci.png"></p><p> 如果只是修改typo，这个标签Upstream通常不会添加。</p><h4 id="6-开发完毕"><a href="#6-开发完毕" class="headerlink" title="6. 开发完毕"></a>6. 开发完毕</h4><p> 开发完成，测试OK，把Draft提升为正式Pull Request，等待Upstraem Review。</p><h4 id="7-Merge到Master"><a href="#7-Merge到Master" class="headerlink" title="7. Merge到Master"></a>7. Merge到Master</h4><p> 如果Upstream通过，你的代码会被Merge到Master，恭喜你成为ClickHouse贡献者</p><h4 id="8-注意事项"><a href="#8-注意事项" class="headerlink" title="8. 注意事项"></a>8. 注意事项</h4><p> ClickHouse Upstream迭代非常快，一定要多关注master分支进度，尽量保持自己的分支代码与master同步。否则Upstream Docker更新，自己的test可能就过不了。</p><p> 建议把<a href="https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/development" target="_blank" rel="noopener">doc/development</a>读一遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一次偶然的机会，和ClickHouse团队做了一次线下沟通，Alexey提到ClickHouse的设计哲学:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The product must solve actual problem&lt;/li&gt;
&lt;li&gt;And do it better than 
      
    
    </summary>
    
    
    
      <category term="clickhouse" scheme="https://bohutang.me/tags/clickhouse/"/>
    
      <category term="ClickHouse和他的朋友们" scheme="https://bohutang.me/tags/ClickHouse%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    
  </entry>
  
</feed>
